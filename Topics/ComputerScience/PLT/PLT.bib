@book{abramskyHandbookLogicComputer1992,
  title = {Handbook of {{Logic}} in {{Computer Science}}: {{Volume}} 1: {{Background}}: {{Mathematical Structures}}},
  shorttitle = {Handbook of {{Logic}} in {{Computer Science}}},
  author = {Abramsky, S.},
  date = {1992-12-10},
  eprint = {ZxI_0AEACAAJ},
  eprinttype = {googlebooks},
  publisher = {Clarendon Press},
  abstract = {The Handbook of Logic in Computer Science is a multi-volume work covering all major areas of application of logic to theoretical computer science. The Handbook comprises six volumes. Each volume contains five or six chapters, giving an in-depth overview of one of the major topics in the field. It is the result of many years of co-operative effort by some of the most eminent frontline researchers in the area. It will no doubt be the standard reference work in logic and theoretical computer science for years to come - essential reading for all those interested in theoretical computer science and logic. volumes cover the background to the subject in terms of mathematical and computational structures. The authors are chosen on an international basis and are leaders in the fields covered. The Handbook is a closely coordinated work which has been under development for the past five years.},
  isbn = {978-0-19-853735-9},
  langid = {english},
  pagetotal = {840},
  keywords = {Mathematics / Discrete Mathematics,Mathematics / History & Philosophy}
}

@book{abramskyHandbookLogicComputer1992a,
  title = {Handbook of {{Logic}} in {{Computer Science}}: {{Volume}} 2: {{Background}}: {{Computational Structures}}},
  shorttitle = {Handbook of {{Logic}} in {{Computer Science}}},
  author = {Abramsky, S.},
  date = {1992-12-10},
  eprint = {FVpKewAACAAJ},
  eprinttype = {googlebooks},
  publisher = {Clarendon Press},
  abstract = {The Handbook of Logic in Computer Science is a multi-volume work covering all major areas of application of logic to theoretical computer science. The Handbook comprises six volumes. Each volume contains five or six chapters giving an in-depth overview of one of the major topics in the field. It is the result of many years of co-operative effort by some of the most eminent frontline researchers in the area. It will no doubt be the standard reference work in logic and theoretical computer science for years to come - essential reading for all those interested in theoretical computer science and logic.},
  isbn = {978-0-19-853761-8},
  langid = {english},
  pagetotal = {582},
  keywords = {Mathematics / Discrete Mathematics,Mathematics / History & Philosophy}
}

@book{abramskyHandbookLogicComputer1995,
  title = {Handbook of {{Logic}} in {{Computer Science}}: {{Volume}} 3: {{Semantic Structures}}},
  shorttitle = {Handbook of {{Logic}} in {{Computer Science计算机科学逻辑手册}}},
  editor = {Abramsky, Edited by S. and Gabbay, Dov M. and Maibaum, {and} T. S. E.},
  date = {1995-06-15},
  publisher = {Oxford University Press},
  location = {Oxford, New York},
  abstract = {Logic is now widely recognized as one of the foundational disciplines of computing, and its applications reach almost every aspect of the subject, from software engineering and hardware to programming languages and AI. The Handbook of Logic in Computer Science is a multi-volume work covering all the major areas of application of logic to theoretical computer science. The handbook comprises six volumes, each containing five or six chapters giving an in-depth overview of one of the major topics in field. It is the result of many years of cooperative effort by some of the most eminent frontline researchers in the field, and will no doubt be the standard reference work in logic and theoretical computer science for years to come. Volume 3: Semantic Structures covers all the fundamental topics of semantics in logic and computation. The extensive chapters are the result of several years of coordinated research, and each have a thematic perspective. Together, they offer the reader the latest in research work, and the book will be indispensable to anyone seriously involved in the subject.               ,                 Logic is now widely recognized as one of the foundational disciplines of computing, and its applications reach almost every aspect of the subject, from software engineering and hardware to programming languages and AI. The Handbook of Logic in Computer Science is a multi-volume work covering all the major areas of application of logic to theoretical computer science. The handbook comprises six volumes, each containing five or six chapters giving an in-depth overview of one of the major topics in field. It is the result of many years of cooperative effort by some of the most eminent frontline researchers in the field, and will no doubt be the standard reference work in logic and theoretical computer science for years to come. Volume 3: Semantic Structures covers all the fundamental topics of semantics in logic and computation. The extensive chapters are the result of several years of coordinated research, and each have a thematic perspective. Together, they offer the reader the latest in research work, and the book will be indispensable to anyone seriously involved in the subject.},
  isbn = {978-0-19-853762-5},
  pagetotal = {506},
  file = {C:\Users\StructSeeker\Zotero\storage\4D3TC3YV\handbook-of-logic-in-computer-science-9780198537625.html}
}

@book{abramskyHandbookLogicComputer1995a,
  title = {Handbook of {{Logic}} in {{Computer Science}}: {{Volume}} 4: {{Semantic Modelling}}},
  shorttitle = {Handbook of {{Logic}} in {{Computer Science}}},
  editor = {Abramsky, Edited by S. and Gabbay, Dov M. and Maibaum, {and} T. S. E.},
  date = {1995-06-15},
  publisher = {Oxford University Press},
  location = {Oxford, New York},
  abstract = {The Handbook of Logic in Computer Science is a multi-volume work covering all the major areas of the application of logic to theoretical computer science. It comprises six volumes, each containing five or six chapters giving an in-depth overview of one of the major topics in the field. The handbook is the result of many years of cooperative effort by eminent researchers in the area, and will no doubt be the standard reference work in logic and theoretical computer science for years to come. Volume 4: Semantic Modelling covers the fundamental topics of semantic modelling in logic and computation. Contents include models for concurrency, concrete process algebra, correspondence between operational and denotational semantics, effective algebras, and abstract interpretation.               ,                 The Handbook of Logic in Computer Science is a multi-volume work covering all the major areas of the application of logic to theoretical computer science. It comprises six volumes, each containing five or six chapters giving an in-depth overview of one of the major topics in the field. The handbook is the result of many years of cooperative effort by eminent researchers in the area, and will no doubt be the standard reference work in logic and theoretical computer science for years to come. Volume 4: Semantic Modelling covers the fundamental topics of semantic modelling in logic and computation. Contents include models for concurrency, concrete process algebra, correspondence between operational and denotational semantics, effective algebras, and abstract interpretation.},
  isbn = {978-0-19-853780-9},
  pagetotal = {666},
  file = {C:\Users\StructSeeker\Zotero\storage\S49S2HFB\handbook-of-logic-in-computer-science-9780198537809.html}
}

@book{abramskyHandbookLogicComputer2001,
  title = {Handbook of {{Logic}} in {{Computer Science}}: {{Volume}} 5: {{Logic}} and {{Algebraic Methods}}},
  editor = {Abramsky, Edited by S. and Gabbay, Dov M. and Maibaum, {and} T. S. E.},
  date = {2001-04-05},
  publisher = {Oxford University Press},
  location = {Oxford, New York},
  abstract = {Logic is now widely recognized as one of the foundational disciplines of computing, and its applications reach almost every aspect of the subject, from software engineering and hardware to programming languages and AI. The Handbook of Logic in Computer Science is a multi-volume work covering all the major areas of application of logic to theoretical computer science. The handbook comprises six volumes, each containing five or six chapters giving an in-depth overview of one of the major topics in field. It is the result of many years of cooperative effort by some of the most eminent frontline researchers in the field, and will no doubt be the standard reference work in logic and theoretical computer science for years to come. Volume 5: Algebraic and Logical Structures covers all the fundamental topics of semantics in logic and computation. The extensive chapters are the result of several years of coordinated research, and each have thematic perspective. Together, they offer the reader the latest in research work, and the book will be indispensable               ,                 Logic is now widely recognized as one of the foundational disciplines of computing, and its applications reach almost every aspect of the subject, from software engineering and hardware to programming languages and AI. The Handbook of Logic in Computer Science is a multi-volume work covering all the major areas of application of logic to theoretical computer science. The handbook comprises six volumes, each containing five or six chapters giving an in-depth overview of one of the major topics in field. It is the result of many years of cooperative effort by some of the most eminent frontline researchers in the field, and will no doubt be the standard reference work in logic and theoretical computer science for years to come. Volume 5: Algebraic and Logical Structures covers all the fundamental topics of semantics in logic and computation. The extensive chapters are the result of several years of coordinated research, and each have thematic perspective. Together, they offer the reader the latest in research work, and the book will be indispensable},
  isbn = {978-0-19-853781-6},
  pagetotal = {556},
  file = {C:\Users\StructSeeker\Zotero\storage\GGURUVGQ\handbook-of-logic-in-computer-science-9780198537816.html}
}

@article{chlipalaFormalReasoningPrograms2017,
  title = {Formal Reasoning about Programs},
  author = {Chlipala, Adam},
  date = {2017},
  journaltitle = {url: http://adam. chlipala. net/frap},
  url = {http://adam.chlipala.net/frap/frap_book.pdf},
  urldate = {2025-05-04},
  file = {X:\Calibre Portable\Calibre Library\Adam Chlipala\Formal Reasoning About Programs (5398)\Formal Reasoning About Programs - Adam Chlipala.pdf}
}

@book{dowekIntroductionTheoryProgramming2010,
  title = {Introduction to the {{Theory}} of {{Programming Languages}}},
  author = {Dowek, Gilles and Lévy, Jean-Jacques},
  date = {2010-12-09},
  eprint = {hD7IEdT_6TYC},
  eprinttype = {googlebooks},
  publisher = {Springer Science \& Business Media},
  abstract = {The design and implementation of programming languages, from Fortran and Cobol to Caml and Java, has been one of the key developments in the management of ever more complex computerized systems. Introduction to the Theory of Programming Languages gives the reader the means to discover the tools to think, design, and implement these languages. It proposes a unified vision of the different formalisms that permit definition of a programming language: small steps operational semantics, big steps operational semantics, and denotational semantics, emphasising that all seek to define a relation between three objects: a program, an input value, and an output value. These formalisms are illustrated by presenting the semantics of some typical features of programming languages: functions, recursivity, assignments, records, objects, ... showing that the study of programming languages does not consist of studying languages one after another, but is organized around the features that arepresent in these various languages. The study of these features leads to the development of evaluators, interpreters and compilers, and also type inference algorithms, for small languages.},
  isbn = {978-0-85729-076-2},
  langid = {english},
  pagetotal = {102},
  keywords = {Computers / Computer Science,Computers / Information Technology,Mathematics / Discrete Mathematics},
  file = {X:\Calibre Portable\Calibre Library\Gilles Dowek\Introduction to the Theory of Prog (14049)\Introduction to the Theory of P - Gilles Dowek.epub}
}

@book{harperPracticalFoundationsProgramming2016,
  title = {Practical {{Foundations}} for {{Programming Languages}}},
  author = {Harper, Robert},
  date = {2016-04-04},
  eprint = {J2KcCwAAQBAJ},
  eprinttype = {googlebooks},
  publisher = {Cambridge University Press},
  abstract = {This text develops a comprehensive theory of programming languages based on type systems and structural operational semantics. Language concepts are precisely defined by their static and dynamic semantics, presenting the essential tools both intuitively and rigorously while relying on only elementary mathematics. These tools are used to analyze and prove properties of languages and provide the framework for combining and comparing language features. The broad range of concepts includes fundamental data types such as sums and products, polymorphic and abstract types, dynamic typing, dynamic dispatch, subtyping and refinement types, symbols and dynamic classification, parallelism and cost semantics, and concurrency and distribution. The methods are directly applicable to language implementation, to the development of logics for reasoning about programs, and to the formal verification language properties such as type safety. This thoroughly revised second edition includes exercises at the end of nearly every chapter and a new chapter on type refinements.},
  isbn = {978-1-107-15030-0},
  langid = {english},
  pagetotal = {513},
  keywords = {Computers / Languages / General}
}

@book{jacobsCategoricalLogicType1999,
  title = {Categorical {{Logic}} and {{Type Theory}}},
  author = {Jacobs, Bart},
  date = {1999},
  eprint = {iMraAAAAMAAJ},
  eprinttype = {googlebooks},
  publisher = {Elsevier Science},
  abstract = {This book is an attempt to give a systematic presentation of both logic and type theory from a categorical perspective, using the unifying concept of fibred category. Its intended audience consists of logicians, type theorists, category theorists and (theoretical) computer scientists.},
  isbn = {978-0-444-50170-7},
  langid = {english},
  pagetotal = {788},
  keywords = {Mathematics / Algebra / General,Mathematics / Applied,Mathematics / Geometry / Algebraic,Mathematics / Group Theory,Mathematics / History & Philosophy,Mathematics / Logic,Science / Philosophy & Social Aspects}
}

@book{mogensenProgrammingLanguageDesign2022,
  title = {Programming {{Language Design}} and {{Implementation}}},
  author = {Mogensen, Torben Ægidius},
  date = {2022-11-22},
  eprint = {pIedEAAAQBAJ},
  eprinttype = {googlebooks},
  publisher = {Springer Nature},
  abstract = {This textbook is intended as a guide for programming-language designers and users to better help them understand consequences of design decisions.The text aims to provide readers with an overview of the design space for programming languages and how design choices affect implementation. It is not a classical compilers book, as it assumes the reader is familiar with basic compiler implementation techniques; nor is it a traditional comparative programming languages book, because it does not go into depth about any particular language, instead taking examples from a wide variety of programming languages to illustrate design concepts. Readers are assumed to already have done at least a bit of programming in functional, imperative, and object-oriented languages.Topics and features:Provides topic-by-topic coverage of syntax, types, scopes, memory management and moreIncludes many technical exercises and discussion exercisesInspires readers to think about language design choices, how these interact, and how they can be implementedCovers advanced topics such as formal semantics and limits of computationSuitable for advanced undergraduates and beginning graduates, this highly practical and useful textbook/guide will also offer programming language professionals a superb reference and learning toolkit.},
  isbn = {978-3-031-11806-7},
  langid = {english},
  pagetotal = {333},
  keywords = {Computers / Languages / General,Computers / Programming / General}
}

@book{nipkowConcreteSemanticsIsabelle2014,
  title = {Concrete {{Semantics}}: {{With Isabelle}}/{{HOL}}},
  shorttitle = {Concrete {{Semantics}}},
  author = {Nipkow, Tobias and Klein, Gerwin},
  date = {2014},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-319-10542-0},
  url = {https://link.springer.com/10.1007/978-3-319-10542-0},
  urldate = {2025-05-04},
  isbn = {978-3-319-10541-3 978-3-319-10542-0},
  langid = {english}
}

@article{palmgrenLectureNotesType2014,
  title = {Lecture Notes on Type Theory},
  author = {Palmgren, Erik},
  date = {2014},
  journaltitle = {book draft},
  url = {http://staff.math.su.se/palmgren/lecturenotesTT.pdf},
  urldate = {2025-05-05},
  file = {X:\Calibre Portable\Calibre Library\Erik Palmgren\Lecture Notes on Type Theory 2014 (14173)\Lecture Notes on Type Theory 20 - Erik Palmgren.pdf}
}

@book{turbakDesignConceptsProgramming2008,
  title = {Design {{Concepts}} in {{Programming Languages}}},
  author = {Turbak, Franklyn and Gifford, David and Sheldon, Mark A.},
  date = {2008-07-18},
  eprint = {xpT6AQAAQBAJ},
  eprinttype = {googlebooks},
  publisher = {MIT Press},
  abstract = {Key ideas in programming language design and implementation explained using a simple and concise framework; a comprehensive introduction suitable for use as a textbook or a reference for researchers.Hundreds of programming languages are in use today—scripting languages for Internet commerce, user interface programming tools, spreadsheet macros, page format specification languages, and many others. Designing a programming language is a metaprogramming activity that bears certain similarities to programming in a regular language, with clarity and simplicity even more important than in ordinary programming. This comprehensive text uses a simple and concise framework to teach key ideas in programming language design and implementation. The book's unique approach is based on a family of syntactically simple pedagogical languages that allow students to explore programming language concepts systematically. It takes as premise and starting point the idea that when language behaviors become incredibly complex, the description of the behaviors must be incredibly simple. The book presents a set of tools (a mathematical metalanguage, abstract syntax, operational and denotational semantics) and uses it to explore a comprehensive set of programming language design dimensions, including dynamic semantics (naming, state, control, data), static semantics (types, type reconstruction, polymporphism, effects), and pragmatics (compilation, garbage collection). The many examples and exercises offer students opportunities to apply the foundational ideas explained in the text. Specialized topics and code that implements many of the algorithms and compilation methods in the book can be found on the book's Web site, along with such additional material as a section on concurrency and proofs of the theorems in the text. The book is suitable as a text for an introductory graduate or advanced undergraduate programming languages course; it can also serve as a reference for researchers and practitioners.},
  isbn = {978-0-262-20175-9},
  langid = {english},
  pagetotal = {1347},
  keywords = {Computers / General,Computers / Languages / General,Computers / Programming / General,Computers / Reference}
}
